// Generated by CoffeeScript 1.6.3
(function() {
  var FS, Q, USAGE, argv, batch, _,
    _this = this;

  FS = require("q-io/fs");

  Q = require("q");

  _ = require("underscore")._;

  argv = require('optimist').argv;

  USAGE = "USAGE: " + process.argv[0] + " " + process.argv[1] + " --dir <directory to process> --out <file to output time series in>";

  if (!((argv.dir != null) && argv.out)) {
    console.error(USAGE);
    process.exit(1);
  }

  batch = function(batchSize) {
    var split;
    split = function(batches, value, index) {
      batches[index / batchSize] = value;
      return batches;
    };
    return function(list) {
      return _.reduce(list, split, []);
    };
  };

  FS.listTree(argv.dir).then(function(entries) {
    var batches, regionFileName, regionFileNames, _i, _len, _results;
    regionFileNames = _.chain(entries).filter(function(e) {
      return /.+(\d+)\/regions$/.test(e);
    }).value();
    batches = batch(10)(regionFileNames);
    _results = [];
    for (_i = 0, _len = batches.length; _i < _len; _i++) {
      batch = batches[_i];
      _results.push(Q.all((function() {
        var _j, _len1, _results1,
          _this = this;
        _results1 = [];
        for (_j = 0, _len1 = batch.length; _j < _len1; _j++) {
          regionFileName = batch[_j];
          _results1.push(FS.read(regionFileName).then(function(content) {
            console.log("Read " + regionFileName);
            return {
              name: regionFileName,
              content: content
            };
          }));
        }
        return _results1;
      }).call(_this)).then(function(read) {
        console.log("" + read.length);
        return console.dir(_.pluck(read, "name"));
      }, function(error) {
        return console.error(error);
      }));
    }
    return _results;
  });

}).call(this);

/*
//@ sourceMappingURL=extractTimeSeries.map
*/
